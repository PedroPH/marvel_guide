(dp1
S'output'
p2
S'<type \'exceptions.RuntimeError\'> Failure to connect, tried 5 times:\nTraceback (most recent call last):\n  File "/home/pedro/web2py/gluon/packages/dal/pydal/base.py", line 437, in __init__\n    self._adapter = ADAPTERS[self._dbname](**kwargs)\n  File "/home/pedro/web2py/gluon/packages/dal/pydal/adapters/base.py", line 57, in __call__\n    obj = super(AdapterMeta, cls).__call__(*args, **kwargs)\n  File "/home/pedro/web2py/gluon/packages/dal/pydal/adapters/postgres.py", line 151, in __init__\n    self.reconnect()\n  File "/home/pedro/web2py/gluon/packages/dal/pydal/connection.py", line 126, in reconnect\n    self.connection = f()\n  File "/home/pedro/web2py/gluon/packages/dal/pydal/adapters/postgres.py", line 148, in connector\n    return self.driver.connect(**driver_args)\n  File "/home/pedro/web2py/gluon/contrib/pg8000/__init__.py", line 336, in connect\n    user, host, unix_sock, port, database, password, ssl)\n  File "/home/pedro/web2py/gluon/contrib/pg8000/core.py", line 1282, in __init__\n    raise self.error\nProgrammingError: (\'FATAL\', \'28P01\', \'password authentication failed for user "postgres"\')\n'
p3
sS'layer'
p4
S'/home/pedro/web2py/applications/marvel_guide/models/db.py'
p5
sS'code'
p6
S"# -*- coding: utf-8 -*-\n\n#########################################################################\n## This scaffolding model makes your app work on Google App Engine too\n## File is released under public domain and you can use without limitations\n#########################################################################\n\n## if SSL/HTTPS is properly configured and you want all HTTP requests to\n## be redirected to HTTPS, uncomment the line below:\n# request.requires_https()\n\n## app configuration made easy. Look inside private/appconfig.ini\nfrom gluon.contrib.appconfig import AppConfig\nfrom datetime import datetime\n## once in production, remove reload=True to gain full speed\nmyconf = AppConfig(reload=True)\n\n\nif not request.env.web2py_runtime_gae:\n    ## if NOT running on Google App Engine use SQLite or other DB\n    db = DAL('postgres://postgres:aq1sw2DE#FR$@localhost/marvel_guide',pool_size=5,check_reserved=['all'],\n                    migrate=True)\nelse:\n    ## connect to Google BigTable (optional 'google:datastore://namespace')\n    db = DAL('google:datastore+ndb')\n    ## store sessions and tickets there\n    session.connect(request, response, db=db)\n    ## or store session in Memcache, Redis, etc.\n    ## from gluon.contrib.memdb import MEMDB\n    ## from google.appengine.api.memcache import Client\n    ## session.connect(request, response, db = MEMDB(Client()))\n\n## by default give a view/generic.extension to all actions from localhost\n## none otherwise. a pattern can be 'controller/function.extension'\nresponse.generic_patterns = ['*'] if request.is_local else []\n## choose a style for forms\nresponse.formstyle = myconf.take('forms.formstyle')  # or 'bootstrap3_stacked' or 'bootstrap2' or other\nresponse.form_label_separator = myconf.take('forms.separator')\n\n\n## (optional) optimize handling of static files\n# response.optimize_css = 'concat,minify,inline'\n# response.optimize_js = 'concat,minify,inline'\n## (optional) static assets folder versioning\n# response.static_version = '0.0.0'\n#########################################################################\n## Here is sample code if you need for\n## - email capabilities\n## - authentication (registration, login, logout, ... )\n## - authorization (role based authorization)\n## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n## - old style crud actions\n## (more options discussed in gluon/tools.py)\n#########################################################################\n\nfrom gluon.tools import Auth, Service, PluginManager\n\nauth = Auth(db)\nservice = Service()\nplugins = PluginManager()\n\n## create all tables needed by auth if not custom tables\nauth.define_tables(username=False, signature=False)\n\n## configure email\nmail = auth.settings.mailer\nmail.settings.server = 'logging' if request.is_local else myconf.take('smtp.server')\nmail.settings.sender = myconf.take('smtp.sender')\nmail.settings.login = myconf.take('smtp.login')\n\n## configure auth policy\nauth.settings.registration_requires_verification = False\nauth.settings.registration_requires_approval = False\nauth.settings.reset_password_requires_verification = True\n\n#########################################################################\n## Define your tables below (or better in another model file) for example\n##\n## >>> db.define_table('mytable',Field('myfield','string'))\n##\n## Fields can be 'string','text','password','integer','double','boolean'\n##       'date','time','datetime','blob','upload', 'reference TABLENAME'\n## There is an implicit 'id integer autoincrement' field\n## Consult manual for more options, validators, etc.\n##\n## More API examples for controllers:\n##\n## >>> db.mytable.insert(myfield='value')\n## >>> rows=db(db.mytable.myfield=='value').select(db.mytable.ALL)\n## >>> for row in rows: print row.id, row.myfield\n#########################################################################\n\n## after defining tables, uncomment below to enable auditing\n# auth.enable_record_versioning(db)\n\ndb.define_table('marvel_character',\n    Field('char_name',requires=IS_NOT_EMPTY(),unique=True,length=128,label='Nome'),\n    Field('created','datetime',label='Criado',default=datetime.now()),\n    Field('char_image',type='upload',uploadfolder='applications/transit/uploads/province/',label='Imagem'),\n    Field('char_type','integer',requires=IS_NOT_EMPTY(),label='Tipo do Personagem'))\n\ndb.define_table('hq',\n    Field('hq_title',requires=IS_NOT_EMPTY(),unique=True,length=128,label='Nome'),\n    Field('created','datetime',label='Criado',default=datetime.now()),\n    Field('hq_image',type='upload',uploadfolder='applications/transit/uploads/province/',label='Imagem'),\n    Field('hq_year',length=4,requires=IS_NOT_EMPTY(),label='Ano'),\n    Field('hq_description',length=500,label='Descri\xc3\xa7\xc3\xa3o'))"
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/pedro/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/pedro/web2py/applications/marvel_guide/models/db.py", line 22, in <module>\n    migrate=True)\n  File "/home/pedro/web2py/gluon/packages/dal/pydal/base.py", line 174, in __call__\n    obj = super(MetaDAL, cls).__call__(*args, **kwargs)\n  File "/home/pedro/web2py/gluon/packages/dal/pydal/base.py", line 459, in __init__\n    raise RuntimeError("Failure to connect, tried %d times:\\n%s" % (attempts, tb))\nRuntimeError: Failure to connect, tried 5 times:\nTraceback (most recent call last):\n  File "/home/pedro/web2py/gluon/packages/dal/pydal/base.py", line 437, in __init__\n    self._adapter = ADAPTERS[self._dbname](**kwargs)\n  File "/home/pedro/web2py/gluon/packages/dal/pydal/adapters/base.py", line 57, in __call__\n    obj = super(AdapterMeta, cls).__call__(*args, **kwargs)\n  File "/home/pedro/web2py/gluon/packages/dal/pydal/adapters/postgres.py", line 151, in __init__\n    self.reconnect()\n  File "/home/pedro/web2py/gluon/packages/dal/pydal/connection.py", line 126, in reconnect\n    self.connection = f()\n  File "/home/pedro/web2py/gluon/packages/dal/pydal/adapters/postgres.py", line 148, in connector\n    return self.driver.connect(**driver_args)\n  File "/home/pedro/web2py/gluon/contrib/pg8000/__init__.py", line 336, in connect\n    user, host, unix_sock, port, database, password, ssl)\n  File "/home/pedro/web2py/gluon/contrib/pg8000/core.py", line 1282, in __init__\n    raise self.error\nProgrammingError: (\'FATAL\', \'28P01\', \'password authentication failed for user "postgres"\')\n\n'
p11
s.